name: 'PR NEW Workflow'

on:
  pull_request:
    types: [ labeled, opened, reopened, synchronize ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PROMTOOL_IMAGE_NAME: sre-promtool
  PROMTOOL_VERSION: 2.38.0
  USER: ho-cto

jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Hadolint Dockerfile
        uses: hadolint/hadolint-action@v2.1.0
        with:
          dockerfile: ./monitoring-as-code/Dockerfile

      - name: Jsonnet format check
        run: |
          sh ${{ github.workspace }}/monitoring-as-code/fmt.sh && git diff --exit-code --color

      - name: Jsonnet lint check
        run: |
          sh ${{ github.workspace }}/monitoring-as-code/lint.sh
  
  container-image-build:
    needs: code-quality
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.step1.outputs.test }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Calculate metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ github.event.pull_request.head.sha }}

      - name: Build container
        uses: docker/build-push-action@v3
        with:
          context: ./monitoring-as-code
          file: ./monitoring-as-code/Dockerfile
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            PACKAGE_TOKEN=${{secrets.GITHUB_TOKEN}}
            MAC_VERSION='#${{ github.event.number }}'
          outputs: type=docker,dest=/tmp/${{ env.IMAGE_NAME }}.tar
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: myimage
          path: /tmp/${{ env.IMAGE_NAME }}.tar
            
      - id: step1
        run: echo "::set-output name=test::${{ steps.meta.outputs.tags }}"
  
  code-test:
    needs: container-image-build
    runs-on: ubuntu-latest
    steps:
      - run: echo ${{needs.container-image-build.outputs.output1}}
      
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: myimage
          path: /tmp
      
      - name: Load Docker image
        run: |
          docker load --input /tmp/${{ env.IMAGE_NAME }}.tar
          docker image ls -a
      
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Run monitoring mixin
        run:  docker run -v ${{ github.workspace }}/monitoring-as-code:${{ github.workspace }}/data -t ${{needs.container-image-build.outputs.output1}} -m monitoring -rd -i ${{ github.workspace }}/data/mixin-defs -o ${{ github.workspace }}/data/output

      - name: Run testing mixin
        run:  docker run -v ${{ github.workspace }}/monitoring-as-code:${{ github.workspace }}/data -t ${{needs.container-image-build.outputs.output1}} -m testing -rd -i ${{ github.workspace }}/data/mixin-defs -o ${{ github.workspace }}/data/output

      - name: Run promtool checks
        run: for FILE in ${{ github.workspace }}/monitoring-as-code/output/prometheus-rules/*-rules.yaml; do docker run -v ${{ github.workspace }}/monitoring-as-code:${{ github.workspace }}/data ${{env.REGISTRY}}/${{env.USER}}/${{env.PROMTOOL_IMAGE_NAME}}:${{env.PROMTOOL_VERSION}} check rules ${{ github.workspace }}/data/output/prometheus-rules/$(basename $FILE); if [ $? -ne 0 ]; then echo "Validation of rules files failed for $(basename $FILE) - exiting"; exit 1; fi done
  
  container-image-test:
    needs: container-image-build
    permissions:
      contents: read
      packages: write
      security-events: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.10.0

      - name: Setup Snyk
        run: |
          npm install snyk -g
          snyk auth ${{secrets.SNYK_TOKEN}}
      
      - name: Snyk Container Scan
        id: snyk-dockerfile
        run: |
          snyk container test --file=./monitoring-as-code/Dockerfile --sarif-file-output=snyk.sarif --app-vulns --severity-threshold=medium ${{ steps.meta.outputs.tags }}
        continue-on-error: true

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

      - name: Check on failures
        if: steps.snyk-dockerfile.outcome != 'success'
        run: exit 1
        
  container-image-push:
    needs: [code-test, container-image-test]
    permissions:
      packages: write
    runs-on: ubuntu-latest
    steps:         
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Push image to GitHub Container Registry
        run: docker push ${{ steps.meta.outputs.tags }}
