name: 'Release Workflow'
on:
  pull_request:
    types: [ closed ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  REPO_NAME: ${{ github.event.repository.name }}
  VERSION: ${{ github.event.inputs.version }}

jobs:
  calculate-semver:
    runs-on: ubuntu-latest
    if: |
      github.event.pull_request.merged == true
    outputs:
      version: ${{steps.calculate.outputs.version}}
    steps:
      - name: Parse the SemVer label
        id: label
        uses: UKHomeOffice/match-label-action@v1
        with:
          labels: minor,major,patch
          mode: singular

      - name: Calculate SemVer value
        id: calculate
        uses: UKHomeOffice/semver-calculate-action@v1
        with:
          increment: ${{ steps.label.outputs.matchedLabels }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_to_highest: ${{ github.base_ref == 'main' }}      
  
  container-image-build:
    needs: calculate-semver
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.2.1
      - name: Calculate metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{needs.calculate-semver.outputs.version}}
            type=raw,value=latest,enable=${{ github.base_ref == 'main' }}
      - run: echo "VERSION=${{needs.calculate-semver.outputs.version}}" >> $GITHUB_ENV
      - name: Build container
        uses: docker/build-push-action@v3.2.0
        with:
          context: ./monitoring-as-code
          file: ./monitoring-as-code/Dockerfile
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            PACKAGE_TOKEN=${{secrets.GITHUB_TOKEN}}
            MAC_VERSION=${{needs.calculate-semver.outputs.version}}
          outputs: type=docker,dest=/tmp/${{ env.REPO_NAME }}.tar
      - name: Upload artifact
        uses: actions/upload-artifact@v3.1.1
        with:
          name: ${{ env.REPO_NAME }}
          path: /tmp/${{ env.REPO_NAME }}.tar
          
  container-image-test:
    needs: container-image-build
    permissions:
      contents: read
      security-events: write
      actions: read
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0
      - name: Download artifact
        uses: actions/download-artifact@v3.0.1
        with:
          name: ${{ env.REPO_NAME }}
          path: /tmp
      - name: Load Docker image
        run: |
          docker load --input /tmp/${{ env.REPO_NAME }}.tar
          echo "IMAGE_TAG=$(docker image ls --format '{{.Repository}}:{{.Tag}}' | grep -m1 sre-monitoring-as-code)" >> $GITHUB_ENV
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.10.0
      - name: Setup Snyk
        run: |
          npm install snyk -g
          snyk auth ${{secrets.SNYK_TOKEN}}
      - name: Snyk Container Scan
        id: snyk-dockerfile
        run: |
          snyk container test --file=./monitoring-as-code/Dockerfile --sarif-file-output=snyk.sarif --app-vulns --severity-threshold=medium ${{ env.IMAGE_TAG }}
        continue-on-error: true
      - name: Dump environment
        run: env
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif
          ref: '${{ ref }}'
          sha: '${{ sha }}'
      - name: Check on failures
        if: steps.snyk-dockerfile.outcome != 'success'
        run: exit 1
        
  container-image-push:
    needs: [container-image-test]
    permissions:
      packages: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0
      - name: Download artifact
        uses: actions/download-artifact@v3.0.1
        with:
          name: ${{ env.REPO_NAME }}
          path: /tmp
      - name: Load Docker image
        run: |
          docker load --input /tmp/${{ env.REPO_NAME }}.tar
          echo "IMAGE_TAG=$(docker image ls --format '{{.Repository}}:{{.Tag}}' | grep -m1 sre-monitoring-as-code)" >> $GITHUB_ENV
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push image to GitHub Container Registry
        run: docker push ${{ env.IMAGE_TAG }}
        
  tag-repo-semver:
    needs: container-image-push
    runs-on: ubuntu-latest
    steps:
      - run: echo ${{needs.container-image-build.outputs.output1}}
      - name: Tag repository with SemVer
        uses: UKHomeOffice/semver-tag-action@v3
        with:
          tag: ${{ env.VERSION }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_use_head_tag: ${{ github.base_ref == 'main' }}

  release-notes:
    needs: tag-repo-semver
    runs-on: ubuntu-latest
    steps:
      - name: Draft release notes
        uses: release-drafter/release-drafter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
